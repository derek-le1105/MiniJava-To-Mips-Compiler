
const vmt_LS
  :LS.Start
  :LS.Print
  :LS.Search
  :LS.Init


func Main()
  t.0 = HeapAllocZ(12)
  [t.0] = :vmt_LS
  if t.0 goto :null1
    Error("null pointer")
  null1:
  t.1 = [t.0]
  t.1 = [t.1+0]
  t.2 = call t.1(t.0 10)
  PrintIntS(t.2)
  ret

func LS.Start(this sz)
  t.0 = [this]
  t.0 = [t.0+12]
  aux01 = call t.0(this sz)
  t.1 = [this]
  t.1 = [t.1+4]
  aux02 = call t.1(this)
  PrintIntS(9999)
  t.2 = [this]
  t.2 = [t.2+8]
  t.3 = call t.2(this 8)
  PrintIntS(t.3)
  t.4 = [this]
  t.4 = [t.4+8]
  t.5 = call t.4(this 12)
  PrintIntS(t.5)
  t.6 = [this]
  t.6 = [t.6+8]
  t.7 = call t.6(this 17)
  PrintIntS(t.7)
  t.8 = [this]
  t.8 = [t.8+8]
  t.9 = call t.8(this 50)
  PrintIntS(t.9)
  ret 55

func LS.Print(this)
  j = 1
  while1_top:
  t.0 = LtS(j size)
  if0 t.0 goto :while1_end
    PrintIntS(number)
    j = Add(j 1)
    goto :while1_top
  while1_end:
  ret 0

func LS.Search(this num)
  j = 1
  ls01 = 0
  ifound = 0
  while1_top:
  t.0 = LtS(j size)
  if0 t.0 goto :while1_end
    aux01 = number
    aux02 = Add(num 1)
    t.1 = LtS(aux01 num)
    if0 t.1 goto :if1_else
      nt = 0
      goto :if1_end
    if1_else:
      t.2 = LtS(aux01 aux02)
      t.3 = t.2
      t.4 = Sub(1 t.3)
      if0 t.4 goto :if1_else
        nt = 0
        goto :if1_end
      if1_else:
        ls01 = 1
        ifound = 1
        j = size
      if1_end:
    if2_end:
    j = Add(j 1)
    goto :while1_top
  while1_end:
  ret ifound

func LS.Init(this sz)
  [this+8] = sz
  t.0 = call :AllocArray(sz)
  [this+4] = t.0
  j = 1
  k = Add(size 1)
  while1_top:
  t.1 = LtS(j size)
  if0 t.1 goto :while1_end
    aux01 = MulS(2 t.2)
    aux02 = Sub(k 3)
    t.2 = Add(aux01 aux02)
    j = Add(j 1)
    k = Sub(k 1)
    goto :while1_top
  while1_end:
  ret 0

func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
